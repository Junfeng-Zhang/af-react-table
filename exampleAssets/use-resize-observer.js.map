{"version":3,"sources":["webpack:///./node_modules/use-resize-observer/dist/bundle.esm.js"],"names":["_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","this","_temp","_ref","ref","onResize","defaultRef","_useState","width","undefined","height","size","setSize","previous","current","Element","element","resizeObserver","ResizeObserver","entries","Array","isArray","entry","newWidth","Math","round","contentRect","newHeight","newSize","observe","unobserve"],"mappings":"yFAAA,WAEA,SAASA,IAeP,OAdAA,EAAWC,OAAOC,QAAU,SAAUC,GACpC,IAAK,IAAIC,EAAI,EAAGA,EAAIC,UAAUC,OAAQF,IAAK,CACzC,IAAIG,EAASF,UAAUD,GAEvB,IAAK,IAAII,KAAOD,EACVN,OAAOQ,UAAUC,eAAeC,KAAKJ,EAAQC,KAC/CL,EAAOK,GAAOD,EAAOC,IAK3B,OAAOL,IAGOS,MAAMC,KAAMR,WA2Ef,IAxEf,SAAgBS,GACd,IAAIC,OAAiB,IAAVD,EAAmB,GAAKA,EAC/BE,EAAMD,EAAKC,IACXC,EAAWF,EAAKE,SAKhBC,EAAa,iBAAO,MACxBF,EAAMA,GAAOE,EAEb,IAAIC,EAAY,mBAAS,CACvBC,WAAOC,EACPC,YAAQD,IAENE,EAAOJ,EAAU,GACjBK,EAAUL,EAAU,GAGpBM,EAAW,iBAAO,CACpBL,WAAOC,EACPC,YAAQD,IA4CV,OA1CA,qBAAU,WACR,GAAmB,iBAARL,GAA4B,OAARA,GAAkBA,EAAIU,mBAAmBC,QAAxE,CAIA,IAAIC,EAAUZ,EAAIU,QACdG,EAAiB,IAAIC,gBAAe,SAAUC,GAChD,GAAKC,MAAMC,QAAQF,IAMdA,EAAQzB,OAAb,CAIA,IAAI4B,EAAQH,EAAQ,GAEhBI,EAAWC,KAAKC,MAAMH,EAAMI,YAAYlB,OACxCmB,EAAYH,KAAKC,MAAMH,EAAMI,YAAYhB,QAE7C,GAAIG,EAASC,QAAQN,QAAUe,GAAYV,EAASC,QAAQJ,SAAWiB,EAAW,CAChF,IAAIC,EAAU,CACZpB,MAAOe,EACPb,OAAQiB,GAGNtB,EACFA,EAASuB,IAETf,EAASC,QAAQN,MAAQe,EACzBV,EAASC,QAAQJ,OAASiB,EAC1Bf,EAAQgB,SAKd,OADAX,EAAeY,QAAQb,GAChB,WACL,OAAOC,EAAea,UAAUd,OAEjC,CAACZ,EAAKC,IACF,mBAAQ,WACb,OAAOjB,EAAS,CACdgB,IAAKA,GACJO,KACF,CAACP,EAAKO,EAAOA,EAAKH,MAAQ,KAAMG,EAAOA,EAAKD,OAAS","file":"use-resize-observer.js","sourcesContent":["import { useRef, useState, useEffect, useMemo } from 'react';\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction index (_temp) {\n  var _ref = _temp === void 0 ? {} : _temp,\n      ref = _ref.ref,\n      onResize = _ref.onResize;\n\n  // `defaultRef` Has to be non-conditionally declared here whether or not it'll\n  // be used as that's how hooks work.\n  // @see https://reactjs.org/docs/hooks-rules.html#explanation\n  var defaultRef = useRef(null);\n  ref = ref || defaultRef;\n\n  var _useState = useState({\n    width: undefined,\n    height: undefined\n  }),\n      size = _useState[0],\n      setSize = _useState[1]; // Using a ref to track the previous width / height to avoid unnecessary renders\n\n\n  var previous = useRef({\n    width: undefined,\n    height: undefined\n  });\n  useEffect(function () {\n    if (typeof ref !== \"object\" || ref === null || !(ref.current instanceof Element)) {\n      return;\n    }\n\n    var element = ref.current;\n    var resizeObserver = new ResizeObserver(function (entries) {\n      if (!Array.isArray(entries)) {\n        return;\n      } // Since we only observe the one element, we don't need to loop over the\n      // array\n\n\n      if (!entries.length) {\n        return;\n      }\n\n      var entry = entries[0]; // `Math.round` is in line with how CSS resolves sub-pixel values\n\n      var newWidth = Math.round(entry.contentRect.width);\n      var newHeight = Math.round(entry.contentRect.height);\n\n      if (previous.current.width !== newWidth || previous.current.height !== newHeight) {\n        var newSize = {\n          width: newWidth,\n          height: newHeight\n        };\n\n        if (onResize) {\n          onResize(newSize);\n        } else {\n          previous.current.width = newWidth;\n          previous.current.height = newHeight;\n          setSize(newSize);\n        }\n      }\n    });\n    resizeObserver.observe(element);\n    return function () {\n      return resizeObserver.unobserve(element);\n    };\n  }, [ref, onResize]);\n  return useMemo(function () {\n    return _extends({\n      ref: ref\n    }, size);\n  }, [ref, size ? size.width : null, size ? size.height : null]);\n}\n\nexport default index;\n"],"sourceRoot":""}